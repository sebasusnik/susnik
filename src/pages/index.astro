---
// Import the Tailwind CSS file
import '../styles/global.css';
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sebastian Susnik - Full-Stack Developer</title>
    
    <!-- Google Fonts for JetBrains Mono -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">

    <style>
        body {
            font-family: 'JetBrains Mono', monospace;
            background-color: #000;
        }
        .cursor {
            display: inline-block;
            background-color: #f8f8f2;
            width: 10px;
            height: 1.2rem;
            animation: blink 1s step-end infinite;
            margin-left: 2px;
            vertical-align: middle;
        }
        @keyframes blink {
            from, to { background-color: transparent }
            50% { background-color: #f8f8f2; }
        }
        #terminal::-webkit-scrollbar { width: 8px; }
        #terminal::-webkit-scrollbar-track { background: transparent; }
        #terminal::-webkit-scrollbar-thumb { background-color: rgba(107, 114, 128, 0.5); border-radius: 4px; }
        .terminal-input {
            background: transparent;
            border: none;
            outline: none;
            color: #f8f8f2;
            flex-grow: 1;
            padding-left: 0.5rem;
        }
    </style>
</head>
<body class="text-gray-300 flex justify-center items-center min-h-screen p-4">

    <div id="terminal" class="w-full max-w-4xl rounded-lg p-4 bg-[#140623] border border-[#43394F] h-[42em] overflow-y-auto">
        <div id="terminal-content"></div>
    </div>

    <script is:inline>
        document.addEventListener('DOMContentLoaded', () => {
            const terminalBody = document.getElementById('terminal');
            const terminalContent = document.getElementById('terminal-content');
            
            // Early return if required elements don't exist
            if (!terminalBody || !terminalContent) {
                console.error('Required terminal elements not found');
                return;
            }
            
            console.log('Terminal elements found successfully');
            
            const introLines = ["I am Sebastian Susnik", "and I like to build stuff..."];
            const projectsCommand = 'projects';
            const skillsCommand = 'skills';
            const validCommands = ['about', 'projects', 'skills', 'contact', 'clear', 'help'];

            const projects = [
                { title: 'Project: E-commerce Platform', status: 'DONE', description: 'Engineered a complete, scalable e-commerce platform using a MERN stack.' },
                { title: 'Project: Real-time Chat App', status: 'DONE', description: 'Built a responsive, real-time chat application with WebSockets and Vue.js.' },
                { title: 'Hobby: Open Source Contribution', status: 'ACTIVE', description: 'Regular contributor to open-source projects, focusing on bug fixes and new features.' }
            ];
            const skills = ['JavaScript (ES6+)', 'React', 'Vue.js', 'Node.js', 'Express', 'HTML5 & CSS3', 'Tailwind CSS', 'SQL (PostgreSQL)', 'NoSQL (MongoDB)', 'AWS (EC2, S3)', 'Docker', 'Git & GitHub', 'CI/CD', 'REST APIs'];

            // Make terminal clickable to focus input
            terminalBody.addEventListener('click', (event) => {
                const hiddenInput = document.getElementById('terminal-input-hidden');
                if (hiddenInput) {
                    hiddenInput.focus();
                    console.log('Terminal clicked, focusing input');
                }
            });

            function scrollToBottom() {
                terminalBody.scrollTop = terminalBody.scrollHeight;
            }
            
            function createStaticPrompt(command, isValid) {
                const promptElement = document.createElement('div');
                promptElement.className = 'flex items-center mb-1';
                
                const parts = command.split(' ');
                const firstWord = parts[0];
                const restOfTheCommand = parts.slice(1).join(' ');

                const commandColor = isValid ? 'text-green-400' : 'text-red-500';

                promptElement.innerHTML = `
                    <span class="text-fuchsia-400">sebastian@portfolio</span><span class="text-gray-500">:</span><span class="text-cyan-400">~</span><span class="text-gray-500">$</span>
                    <span class="pl-2"><span class="${commandColor}">${firstWord}</span><span class="text-white">&nbsp;${restOfTheCommand}</span></span>
                `;
                return promptElement;
            }

            function typeText(element, text, callback, speed = 80) {
                let i = 0;
                element.innerHTML = '';
                const cursor = document.createElement('span');
                cursor.className = 'cursor';
                element.appendChild(cursor);
                function typing() {
                    if (i < text.length) {
                        element.insertBefore(document.createTextNode(text.charAt(i)), cursor);
                        i++;
                        scrollToBottom();
                        setTimeout(typing, speed);
                    } else {
                        cursor.remove();
                        if (callback) callback();
                    }
                }
                typing();
            }
            
            function getCommandOutput(command) {
                const outputContainer = document.createElement('div');
                outputContainer.className = 'mb-4';
                const firstWord = command.split(' ')[0];

                if(validCommands.includes(firstWord)) {
                    if(firstWord === 'projects') {
                        projects.forEach(proj => {
                            const projElement = document.createElement('div');
                            projElement.className = 'mb-6';
                            const statusColor = proj.status === 'DONE' ? 'text-green-400' : 'text-yellow-400';
                            projElement.innerHTML = `<div class="flex items-center"><span class="text-white font-bold">${proj.title}</span><span class="ml-4">[<span class="${statusColor} font-bold">${proj.status}</span>]</span></div><p class="text-gray-400 mt-1 pl-2">${proj.description}</p>`;
                            outputContainer.appendChild(projElement);
                        });
                    } else if (firstWord === 'skills') {
                        outputContainer.innerHTML = `<h3 class="text-lg text-cyan-400 font-bold mb-2">Core Competencies:</h3>`;
                        const list = document.createElement('ul');
                        list.className = 'flex flex-wrap gap-x-8 gap-y-2 pl-2';
                        skills.forEach(skill => list.innerHTML += `<li class="text-white">- ${skill}</li>`);
                        outputContainer.appendChild(list);
                    } else if (firstWord === 'contact') {
                        outputContainer.innerHTML = `<p>You can reach me at:</p><a href="mailto:sebastian.susnik@example.com" class="text-cyan-400 hover:underline">sebastian.susnik@example.com</a>`;
                    } else if (firstWord === 'help') {
                        outputContainer.innerHTML = `<p class="mb-2">Available commands:</p>
                        <ul class="list-disc list-inside">
                            <li><span class="text-cyan-400">about</span>    - Who I am (animated)</li>
                            <li><span class="text-cyan-400">projects</span> - View my work</li>
                            <li><span class="text-cyan-400">skills</span>   - See my competencies</li>
                            <li><span class="text-cyan-400">contact</span>  - Get in touch</li>
                            <li><span class="text-cyan-400">clear</span>    - Clear the terminal</li>
                        </ul>`;
                    }
                } else {
                    outputContainer.innerHTML = `<p>Command not found: ${command}. Type 'help' for a list of commands.</p>`;
                }
                return outputContainer;
            }

            function handleUserCommand(command) {
                const firstWord = command.split(' ')[0];
                if (firstWord === 'clear') {
                    terminalContent.innerHTML = '';
                    createInteractivePrompt();
                    return;
                }
                const output = getCommandOutput(command);
                terminalContent.appendChild(output);
            }
            
            function createInteractivePrompt() {
                console.log('Creating interactive prompt...');
                
                // Remove any existing prompt first
                const existingForm = terminalContent.querySelector('form');
                if (existingForm) {
                    existingForm.remove();
                }
                
                const form = document.createElement('form');
                form.className = 'flex items-center mb-2';
                form.innerHTML = `
                    <span class="text-fuchsia-400">sebastian@portfolio</span><span class="text-gray-500">:</span><span class="text-cyan-400">~</span><span class="text-gray-500">$</span>
                    <div id="input-container" class="flex-grow" style="min-height: 1.5rem; white-space: pre;"></div>
                    <input type="text" id="terminal-input-hidden" class="opacity-0 absolute w-0 h-0" autocomplete="off" />
                `;
                terminalContent.appendChild(form);

                const hiddenInput = document.getElementById('terminal-input-hidden');
                const visibleInputContainer = document.getElementById('input-container');
                
                if (!hiddenInput || !visibleInputContainer) {
                    console.error('Required input elements not found');
                    return;
                }
                
                console.log('Input elements created successfully');
                
                // Add initial space and cursor
                const initialSpace = document.createElement('span');
                initialSpace.textContent = ' ';
                visibleInputContainer.appendChild(initialSpace);
                
                const initialCursor = document.createElement('span');
                initialCursor.className = 'cursor';
                visibleInputContainer.appendChild(initialCursor);
                
                // Focus the input immediately
                setTimeout(() => {
                    hiddenInput.focus();
                    console.log('Input focused');
                }, 100);

                hiddenInput.addEventListener('input', (e) => {
                    const value = e.target.value;
                    const container = visibleInputContainer;
                    
                    // Clear previous content
                    while (container.firstChild) {
                        container.removeChild(container.firstChild);
                    }

                    const spaceIndex = value.indexOf(' ');
                    const command = (spaceIndex === -1) ? value : value.substring(0, spaceIndex);
                    const rest = (spaceIndex === -1) ? '' : value.substring(spaceIndex + 1);

                    // Add a leading space for padding
                    container.appendChild(document.createTextNode(' '));

                    if (command) {
                        const commandSpan = document.createElement('span');
                        const commandColor = validCommands.includes(command.toLowerCase()) ? 'text-green-400' : 'text-red-500';
                        commandSpan.className = commandColor;
                        commandSpan.textContent = command;
                        container.appendChild(commandSpan);
                        // add single real space only if user typed space after command
                        if (value.length > command.length && value.charAt(command.length) === ' ') {
                            container.appendChild(document.createTextNode(' '));
                        }
                    }

                    // Append the rest of the input (arguments) exactly as typed
                    if (rest) {
                        const restSpan = document.createElement('span');
                        restSpan.className = 'text-white';
                        restSpan.textContent = rest;
                        container.appendChild(restSpan);
                    }

                    // Always add the cursor at the end
                    const cursorSpan = document.createElement('span');
                    cursorSpan.className = 'cursor';
                    container.appendChild(cursorSpan);
                });

                form.addEventListener('submit', (e) => {
                    e.preventDefault();
                    const command = hiddenInput.value.trim().toLowerCase();
                    console.log('Command submitted:', command);
                    
                    if (!command) {
                        createInteractivePrompt();
                        return;
                    }
                    
                    const firstWord = command.split(' ')[0];
                    const isValid = validCommands.includes(firstWord);
                    const staticPrompt = createStaticPrompt(command, isValid);
                    form.replaceWith(staticPrompt); 

                    if (firstWord === 'about') {
                        runAboutAnimation(() => createInteractivePrompt());
                    } else {
                        handleUserCommand(command);
                        createInteractivePrompt();
                    }
                    scrollToBottom();
                });
                
                scrollToBottom();
            }

            function runAboutAnimation(callback) {
                const container1 = document.createElement('div');
                container1.className = "text-lg md:text-xl lg:text-2xl";
                terminalContent.appendChild(container1);
                typeText(container1, introLines[0], () => {
                    setTimeout(() => {
                        const container2 = document.createElement('div');
                        container2.className = "text-lg md:text-xl lg:text-2xl mb-4";
                        terminalContent.appendChild(container2);
                        typeText(container2, introLines[1], () => {
                            if (callback) {
                                callback();
                            } else {
                                createInteractivePrompt();
                            }
                        });
                    }, 500);
                }, 50);
            }

            function showProjectsAnimated(callback) {
                const projectsContainer = document.createElement('div');
                projectsContainer.className = 'mt-2 mb-4';
                terminalContent.appendChild(projectsContainer);
                
                const initialMessage = document.createElement('div');
                initialMessage.className = 'text-cyan-400 mb-4 text-base';
                initialMessage.textContent = `Running: "${projectsCommand}"...`;
                projectsContainer.appendChild(initialMessage);
                scrollToBottom();

                let projectIndex = 0;
                function displayNextProject() {
                    if (projectIndex < projects.length) {
                        const proj = projects[projectIndex];
                        const projElement = document.createElement('div');
                        projElement.className = 'text-sm md:text-base mb-6 opacity-0 transition-opacity duration-500';
                        const statusColor = proj.status === 'DONE' ? 'text-green-400' : 'text-yellow-400';
                        projElement.innerHTML = `<div class="flex items-center"><span class="text-white font-bold">${proj.title}</span><span class="ml-4">[<span class="${statusColor} font-bold">${proj.status}</span>]</span></div><p class="text-gray-400 mt-1 pl-2">${proj.description}</p>`;
                        projectsContainer.appendChild(projElement);
                        setTimeout(() => projElement.classList.remove('opacity-0'), 10);
                        scrollToBottom();
                        projectIndex++;
                        setTimeout(displayNextProject, 350);
                    } else if (callback) {
                        setTimeout(callback, 500);
                    }
                }
                displayNextProject();
            }

            function showSkillsAnimated(callback) {
                const skillsContainer = document.createElement('div');
                skillsContainer.className = 'mt-2 mb-4';
                terminalContent.appendChild(skillsContainer);

                const initialMessage = document.createElement('div');
                initialMessage.className = 'text-cyan-400 mb-4 text-base';
                initialMessage.textContent = `Running: "${skillsCommand}"...`;
                skillsContainer.appendChild(initialMessage);

                const title = document.createElement('h3');
                title.className = 'text-lg text-cyan-400 font-bold mb-2 opacity-0 transition-opacity duration-500';
                title.textContent = 'Core Competencies:';
                skillsContainer.appendChild(title);
                setTimeout(() => title.classList.remove('opacity-0'), 10);
                
                const listElement = document.createElement('ul');
                listElement.className = 'flex flex-wrap gap-x-8 gap-y-2 pl-2';
                skillsContainer.appendChild(listElement);

                let skillIndex = 0;
                function displayNextSkill() {
                    if (skillIndex < skills.length) {
                        const skill = skills[skillIndex];
                        const li = document.createElement('li');
                        li.className = 'text-white opacity-0 transition-opacity duration-500';
                        li.textContent = `- ${skill}`;
                        listElement.appendChild(li);
                        setTimeout(() => li.classList.remove('opacity-0'), 10);
                        scrollToBottom();
                        skillIndex++;
                        setTimeout(displayNextSkill, 150);
                    } else if (callback) {
                        setTimeout(callback, 500);
                    }
                }
                setTimeout(displayNextSkill, 500);
            }

            function runInitialSequence() {
                console.log('Starting initial sequence...');
                runAboutAnimation(() => {
                    setTimeout(() => {
                        const projectsPromptContainer = document.createElement('div');
                        projectsPromptContainer.innerHTML = `<div class="flex items-center mb-1">
                            <span class="text-fuchsia-400">sebastian@portfolio</span><span class="text-gray-500">:</span><span class="text-cyan-400">~</span><span class="text-gray-500">$</span>
                            <span class="pl-2 command-to-type"></span>
                        </div>`;
                        terminalContent.appendChild(projectsPromptContainer);
                        const commandSpan = projectsPromptContainer.querySelector('.command-to-type');
                        
                        if (commandSpan) {
                            typeText(commandSpan, projectsCommand, () => {
                                projectsPromptContainer.replaceWith(createStaticPrompt(projectsCommand, true));
                                showProjectsAnimated(() => {
                                    const skillsPromptContainer = document.createElement('div');
                                    skillsPromptContainer.innerHTML = `<div class="flex items-center mb-1">
                                        <span class="text-fuchsia-400">sebastian@portfolio</span><span class="text-gray-500">:</span><span class="text-cyan-400">~</span><span class="text-gray-500">$</span>
                                        <span class="pl-2 command-to-type"></span>
                                    </div>`;
                                    terminalContent.appendChild(skillsPromptContainer);
                                    const skillsCommandSpan = skillsPromptContainer.querySelector('.command-to-type');
                                    
                                    if (skillsCommandSpan) {
                                        typeText(skillsCommandSpan, skillsCommand, () => {
                                            skillsPromptContainer.replaceWith(createStaticPrompt(skillsCommand, true));
                                            showSkillsAnimated(() => {
                                                console.log('Initial sequence complete, creating interactive prompt');
                                                createInteractivePrompt();
                                            });
                                        });
                                    }
                                });
                            });
                        }
                    }, 500);
                });
            }
            
            // Start the original beautiful sequence
            runInitialSequence();
        });
    </script>
</body>
</html>
